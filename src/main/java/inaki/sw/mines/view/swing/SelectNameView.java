package inaki.sw.mines.view.swing;

import inaki.sw.mines.controller.Controller;
import inaki.sw.mines.view.ISelectNameView;
import inaki.sw.mines.view.swing.utils.Autocomplete;
import java.util.List;
import static java.util.logging.Level.SEVERE;
import static java.util.logging.Logger.getLogger;
import javax.swing.JFrame;
import javax.swing.KeyStroke;
import static javax.swing.SwingUtilities.updateComponentTreeUI;
import static javax.swing.UIManager.setLookAndFeel;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author inaki
 * @since 2.1 or before
 */
public class SelectNameView extends JFrame implements ISelectNameView {

    private static final String COMMIT_ACTION = "commit";
    Autocomplete autoComplete;
    private boolean disableNimbus;

    /**
     * Creates new form SelectNameView
     */
    public SelectNameView() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpSelectName = new javax.swing.JPanel();
        jlSelectName = new javax.swing.JLabel();
        jtfSelectName = new javax.swing.JTextField();
        jpBottom = new javax.swing.JPanel();
        jbOK = new javax.swing.JButton();
        jbCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("I-SW Mines");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/icon/isw-mines-96.png")).getImage());
        setResizable(false);

        jlSelectName.setText("Select your name:");

        jtfSelectName.setColumns(20);

        javax.swing.GroupLayout jpSelectNameLayout = new javax.swing.GroupLayout(jpSelectName);
        jpSelectName.setLayout(jpSelectNameLayout);
        jpSelectNameLayout.setHorizontalGroup(
            jpSelectNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSelectNameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpSelectNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlSelectName)
                    .addComponent(jtfSelectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jpSelectNameLayout.setVerticalGroup(
            jpSelectNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpSelectNameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jlSelectName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfSelectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jbOK.setText("OK");

        jbCancel.setText("Cancel");
        jbCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpBottomLayout = new javax.swing.GroupLayout(jpBottom);
        jpBottom.setLayout(jpBottomLayout);
        jpBottomLayout.setHorizontalGroup(
            jpBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBottomLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbOK)
                .addContainerGap())
        );
        jpBottomLayout.setVerticalGroup(
            jpBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBottomLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jpBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbOK)
                    .addComponent(jbCancel))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpSelectName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jpBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpSelectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpBottom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCancelActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jbCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jbCancel;
    private javax.swing.JButton jbOK;
    private javax.swing.JLabel jlSelectName;
    private javax.swing.JPanel jpBottom;
    private javax.swing.JPanel jpSelectName;
    private javax.swing.JTextField jtfSelectName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setController(Controller c) {
        jbOK.addActionListener(c);
        jbOK.setActionCommand(SNV_OK);
        jtfSelectName.addActionListener(c);
        jtfSelectName.setActionCommand(SNV_OK);
    }

    @Override
    public void startView() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code ">
        if (!disableNimbus) {
            try {
                setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
                updateComponentTreeUI(this);
                this.repaint();
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
                getLogger(ChooseGameView.class.getName()).log(SEVERE, null, ex);
            } finally {
                this.pack();
            }
        }
        //</editor-fold>
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    @Override
    public void hideView() {
        this.setVisible(false);
    }

    @Override
    public String getSelectedName() {
        return this.jtfSelectName.getText();
    }

    @Override
    public void setSavedNameSet(List<String> names) {
        // Without this, cursor always leaves text field
        jtfSelectName.setFocusTraversalKeysEnabled(false);

        if (autoComplete != null) {
            jtfSelectName.getDocument().removeDocumentListener(autoComplete);
        }
        autoComplete = new Autocomplete(jtfSelectName, names);
        jtfSelectName.getDocument().addDocumentListener(autoComplete);

        // Maps the tab key to the commit action, which finishes the autocomplete
        // when given a suggestion
        jtfSelectName.getInputMap().put(KeyStroke.getKeyStroke("TAB"), COMMIT_ACTION);
        jtfSelectName.getActionMap().put(COMMIT_ACTION, autoComplete.new CommitAction());
    }

    @Override
    public void disableNimbus(boolean disableNimbus) {
        this.disableNimbus = disableNimbus;
    }
}
